generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  title       String?
  users       GroupUser[]
  posts       Post[]
}

model GroupUser {
  groupId Int            @map("group_id")
  userId  Int            @map("user_id")
  role    GroupUserRole?
  group   Group          @relation(fields: [groupId], references: [id])
  user    User           @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Post {
  id       Int           @id @default(autoincrement())
  groupId  Int           @map("group_id")
  userId   Int           @map("user_id")
  title    String        @unique
  content  String
  media    String?
  group    Group         @relation(fields: [groupId], references: [id])
  user     User          @relation(fields: [userId], references: [id])
  comments PostComment[]
  votes    PostVote[]
}

model PostComment {
  id              Int               @id @default(autoincrement())
  postId          Int               @map("post_id")
  userId          Int               @map("user_id")
  parentCommentId Int               @map("parent_comment_id")
  content         String
  parentComment   PostComment       @relation("post_commentTopost_comment_parent_comment_id", fields: [parentCommentId], references: [id])
  post            Post              @relation(fields: [postId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  childComments   PostComment[]     @relation("post_commentTopost_comment_parent_comment_id")
  votes           PostCommentVote[]
}

model PostCommentVote {
  commentId       Int          @map("comment_id")
  userId          Int          @map("user_id")
  voteType        PostVoteType @map("vote_type")
  createdDatetime DateTime     @default(now()) @map("created_datetime")
  comment         PostComment  @relation(fields: [commentId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@id([commentId, userId])
}

model PostVote {
  postId          Int          @map("post_id")
  userId          Int          @map("user_id")
  createdDatetime DateTime     @default(now()) @map("created_datetime")
  voteType        PostVoteType @map("vote_type")
  post            Post         @relation(fields: [postId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model User {
  id            Int               @id @default(autoincrement())
  username      String            @unique
  email         String            @unique
  password      String
  karma         Int
  role          UserRole
  emailVerified Boolean           @default(false) @map("email_verified")
  groupUsers    GroupUser[]
  posts         Post[]
  comments      PostComment[]
  commentVotes  PostCommentVote[]
  postVotes     PostVote[]
}

enum GroupUserRole {
  admin
  moderator
  user
}

enum PostVoteType {
  downvote
  neutral
  upvote
}

enum UserRole {
  administrator
  moderator
  user
}
